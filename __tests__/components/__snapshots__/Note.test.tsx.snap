// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Note component handlers handleChange should call method with changed text with note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="Should I..."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="Should I..."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="Should I..."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={false}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers handleChange should call method with changed text without note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value=""
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value=""
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value=""
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="Should I..."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="Should I..."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="Should I..."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={true}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers handleChange should call method with changed title with note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army1"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army1"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army1"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="An army, ground force, or land force is a fighting force that fights primarily on land."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="An army, ground force, or land force is a fighting force that fights primarily on land."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="An army, ground force, or land force is a fighting force that fights primarily on land."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={false}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers handleChange should call method with changed title without note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army1"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army1"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army1"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value=""
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value=""
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value=""
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={true}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers handleCheckButtonAction should call handleModalBackButtonClick method with changes 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army1"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army1"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army1"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="An army, ground force, or land force is a fighting force that fights primarily on land."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="An army, ground force, or land force is a fighting force that fights primarily on land."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="An army, ground force, or land force is a fighting force that fights primarily on land."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={false}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={true}
    buttonCancelText="Cancel"
    buttonConfirmText="Back"
    modalText="You have changes in your note. Do you want to exit to the main menu without saving?"
    onClose={[Function]}
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "lastClassName": "hhHtSZ",
              "rules": Array [
                "
	position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .7);
    z-index: 999;
",
              ],
            },
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-bwzfXH hhHtSZ"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "PqmDJ",
                    "rules": Array [
                      "
	display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    width: 400px;
    padding: 25px;
    margin: 25px;
    background-color: ",
                      "#FFFFFF",
                      ";
",
                    ],
                  },
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-htpNat PqmDJ"
              >
                <styled.h2>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bxivhb",
                          "isStatic": false,
                          "lastClassName": "cKwxgr",
                          "rules": Array [
                            "
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    text-align: center;
    margin: 0 0 25px 0;
    color: ",
                            "#5A5A5A",
                            ";
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bxivhb",
                        "target": "h2",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h2
                      className="sc-bxivhb cKwxgr"
                    >
                      You have changes in your note. Do you want to exit to the main menu without saving?
                    </h2>
                  </StyledComponent>
                </styled.h2>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "kMSJaD",
                          "rules": Array [
                            "
	display: flex;
	justify-content: space-between;
    width: 100%;
    gap: 20px;
    @media (max-width: 989px) {
        flex-direction: column;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-ifAKCX kMSJaD"
                    >
                      <Button
                        color="green"
                        onClick={[Function]}
                        text="Back"
                        type="button"
                      >
                        <styled.button
                          color="green"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="green"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa mScxf"
                              color="green"
                              onClick={[Function]}
                              type="button"
                            >
                              Back
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                      <Button
                        color="red"
                        onClick={[Function]}
                        text="Cancel"
                        type="button"
                      >
                        <styled.button
                          color="red"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="red"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa kHeIQK"
                              color="red"
                              onClick={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
  </Modal>
</Note>
`;

exports[`Note component handlers handleCheckButtonAction should call handleNavigateToHome method without changes 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="An army, ground force, or land force is a fighting force that fights primarily on land."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="An army, ground force, or land force is a fighting force that fights primarily on land."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="An army, ground force, or land force is a fighting force that fights primarily on land."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={true}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={true}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={true}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={true}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers handleCheckSaveOrUpdateChanges should call method with note and have changes in text 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="Should I..."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="Should I..."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="Should I..."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={false}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={true}
    buttonCancelText="Cancel"
    buttonConfirmText="Save"
    modalText="Do you want to save your note?"
    onClose={[Function]}
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "lastClassName": "hhHtSZ",
              "rules": Array [
                "
	position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .7);
    z-index: 999;
",
              ],
            },
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-bwzfXH hhHtSZ"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "PqmDJ",
                    "rules": Array [
                      "
	display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    width: 400px;
    padding: 25px;
    margin: 25px;
    background-color: ",
                      "#FFFFFF",
                      ";
",
                    ],
                  },
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-htpNat PqmDJ"
              >
                <styled.h2>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bxivhb",
                          "isStatic": false,
                          "lastClassName": "cKwxgr",
                          "rules": Array [
                            "
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    text-align: center;
    margin: 0 0 25px 0;
    color: ",
                            "#5A5A5A",
                            ";
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bxivhb",
                        "target": "h2",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h2
                      className="sc-bxivhb cKwxgr"
                    >
                      Do you want to save your note?
                    </h2>
                  </StyledComponent>
                </styled.h2>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "kMSJaD",
                          "rules": Array [
                            "
	display: flex;
	justify-content: space-between;
    width: 100%;
    gap: 20px;
    @media (max-width: 989px) {
        flex-direction: column;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-ifAKCX kMSJaD"
                    >
                      <Button
                        color="green"
                        onClick={[Function]}
                        text="Save"
                        type="button"
                      >
                        <styled.button
                          color="green"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="green"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa mScxf"
                              color="green"
                              onClick={[Function]}
                              type="button"
                            >
                              Save
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                      <Button
                        color="red"
                        onClick={[Function]}
                        text="Cancel"
                        type="button"
                      >
                        <styled.button
                          color="red"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="red"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa kHeIQK"
                              color="red"
                              onClick={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
  </Modal>
</Note>
`;

exports[`Note component handlers handleCheckSaveOrUpdateChanges should call method with note and with changes 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army1"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army1"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army1"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="An army, ground force, or land force is a fighting force that fights primarily on land."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="An army, ground force, or land force is a fighting force that fights primarily on land."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="An army, ground force, or land force is a fighting force that fights primarily on land."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={false}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={false}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={false}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={false}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={true}
    buttonCancelText="Cancel"
    buttonConfirmText="Save"
    modalText="Do you want to save your note?"
    onClose={[Function]}
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "lastClassName": "hhHtSZ",
              "rules": Array [
                "
	position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .7);
    z-index: 999;
",
              ],
            },
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-bwzfXH hhHtSZ"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "PqmDJ",
                    "rules": Array [
                      "
	display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    width: 400px;
    padding: 25px;
    margin: 25px;
    background-color: ",
                      "#FFFFFF",
                      ";
",
                    ],
                  },
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-htpNat PqmDJ"
              >
                <styled.h2>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bxivhb",
                          "isStatic": false,
                          "lastClassName": "cKwxgr",
                          "rules": Array [
                            "
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    text-align: center;
    margin: 0 0 25px 0;
    color: ",
                            "#5A5A5A",
                            ";
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bxivhb",
                        "target": "h2",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h2
                      className="sc-bxivhb cKwxgr"
                    >
                      Do you want to save your note?
                    </h2>
                  </StyledComponent>
                </styled.h2>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "kMSJaD",
                          "rules": Array [
                            "
	display: flex;
	justify-content: space-between;
    width: 100%;
    gap: 20px;
    @media (max-width: 989px) {
        flex-direction: column;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-ifAKCX kMSJaD"
                    >
                      <Button
                        color="green"
                        onClick={[Function]}
                        text="Save"
                        type="button"
                      >
                        <styled.button
                          color="green"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="green"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa mScxf"
                              color="green"
                              onClick={[Function]}
                              type="button"
                            >
                              Save
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                      <Button
                        color="red"
                        onClick={[Function]}
                        text="Cancel"
                        type="button"
                      >
                        <styled.button
                          color="red"
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            color="red"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "kHeIQK",
                                  "rules": Array [
                                    "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                    "#FFFFFF",
                                    ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                    "#FFFFFF",
                                    ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                    "#808080",
                                    ";
        background-color: ",
                                    "#808080",
                                    ";
        &:hover { 
            background-color: ",
                                    "#808080",
                                    ";
            color: ",
                                    "#FFFFFF",
                                    ";
            cursor: default;
        }
    }
    ",
                                    [Function],
                                    "
    ",
                                    [Function],
                                    "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                  ],
                                },
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-bdVaJa kHeIQK"
                              color="red"
                              onClick={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Button>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
  </Modal>
</Note>
`;

exports[`Note component handlers onSubmit should call method with note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  note={
    Object {
      "created_at": 1632734670806,
      "id": "b83cbac2-d74e-458d-85c0-75bdf9c29ba3",
      "text": "An army, ground force, or land force is a fighting force that fights primarily on land.",
      "title": "Army",
      "updated_at": 1632735522467,
    }
  }
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value="Army"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value="Army"
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value="Army"
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value="An army, ground force, or land force is a fighting force that fights primarily on land."
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value="An army, ground force, or land force is a fighting force that fights primarily on land."
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value="An army, ground force, or land force is a fighting force that fights primarily on land."
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={true}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={true}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={true}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={true}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component handlers onSubmit should call method without note 1`] = `
<Note
  addOrUpdateNote={[Function]}
  navigateToPage={[Function]}
  typeName="Save"
>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "jFXPCk",
            "rules": Array [
              "
    display: flex;
    flex-direction: column;
    padding: 20px;
    @media (min-height: 400px) {   
        max-height: 100vh;
    }
",
            ],
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="addOrUpdateNote"
      onSubmit={[Function]}
    >
      <form
        className="sc-EHOje jFXPCk"
        id="addOrUpdateNote"
        onSubmit={[Function]}
      >
        <styled.input
          name="title"
          onChange={[Function]}
          placeholder="Title"
          required={true}
          type="text"
          value=""
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "dAXJdr",
                  "rules": Array [
                    "
    font-style: normal;
    font-weight: bold;
    font-size: 36px;
    line-height: 47px;
    padding: 15px;
    margin: 0 0 20px 0;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 24px;
        line-height: 31px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="title"
            onChange={[Function]}
            placeholder="Title"
            required={true}
            type="text"
            value=""
          >
            <input
              className="sc-bZQynM dAXJdr"
              name="title"
              onChange={[Function]}
              placeholder="Title"
              required={true}
              type="text"
              value=""
            />
          </StyledComponent>
        </styled.input>
        <styled.textarea
          name="text"
          onChange={[Function]}
          placeholder="Text"
          required={true}
          value=""
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "jFpsRi",
                  "rules": Array [
                    "
    font-family: inherit;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    line-height: 31px;
    padding: 15px;
    margin: 0 0 20px 0;
    resize: none;
    border: none;
    box-shadow: inset 0px 0px 20px rgba(0, 0, 0, 0.25);
    height: 680px;
    min-height: 100px;
    color: ",
                    "#5A5A5A",
                    ";
    @media (max-width: 450px) {
        font-size: 18px;
        line-height: 24px;
    }
    @media (max-height: 400px) {
        height: 100px;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "textarea",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="text"
            onChange={[Function]}
            placeholder="Text"
            required={true}
            value=""
          >
            <textarea
              className="sc-gzVnrw jFpsRi"
              name="text"
              onChange={[Function]}
              placeholder="Text"
              required={true}
              value=""
            />
          </StyledComponent>
        </styled.textarea>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "bGccac",
                  "rules": Array [
                    "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: row;
        align-items: center;
    }
",
                  ],
                },
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htoDjs bGccac"
            >
              <Button
                color="red"
                onClick={[Function]}
                text="Back"
                type="button"
              >
                <styled.button
                  color="red"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    color="red"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "kHeIQK",
                          "rules": Array [
                            "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                            "#FFFFFF",
                            ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                            "#FFFFFF",
                            ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                            "#808080",
                            ";
        background-color: ",
                            "#808080",
                            ";
        &:hover { 
            background-color: ",
                            "#808080",
                            ";
            color: ",
                            "#FFFFFF",
                            ";
            cursor: default;
        }
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                          ],
                        },
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="sc-bdVaJa kHeIQK"
                      color="red"
                      onClick={[Function]}
                      type="button"
                    >
                      Back
                    </button>
                  </StyledComponent>
                </styled.button>
              </Button>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "rAqHm",
                        "rules": Array [
                          "
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    @media (max-width: 590px) {
        flex-direction: column;
    }
    @media (max-width: 450px) {
        width: 100%;
    }
",
                        ],
                      },
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-dnqmqq rAqHm"
                  >
                    <Button
                      color="green"
                      disabled={true}
                      form="addOrUpdateNote"
                      onClick={[Function]}
                      text="Save"
                      type="button"
                    >
                      <styled.button
                        color="green"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          color="green"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="sc-bdVaJa mScxf"
                            color="green"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Save
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                    <Button
                      color="red"
                      disabled={true}
                      onClick={[Function]}
                      text="Cancel"
                      type="reset"
                    >
                      <styled.button
                        color="red"
                        disabled={true}
                        onClick={[Function]}
                        type="reset"
                      >
                        <StyledComponent
                          color="red"
                          disabled={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "kHeIQK",
                                "rules": Array [
                                  "
    min-width: 170px;
    border-radius: 15px;
    color: ",
                                  "#FFFFFF",
                                  ";
    padding: 10px 25px;
    transition-duration: .1s;
    font-style: normal;
    font-weight: bold;
    font-size: 24px;
    &:hover {
        background-color: ",
                                  "#FFFFFF",
                                  ";
    }
    &:disabled {
        opacity: .5;
        border: 4px solid ",
                                  "#808080",
                                  ";
        background-color: ",
                                  "#808080",
                                  ";
        &:hover { 
            background-color: ",
                                  "#808080",
                                  ";
            color: ",
                                  "#FFFFFF",
                                  ";
            cursor: default;
        }
    }
    ",
                                  [Function],
                                  "
    ",
                                  [Function],
                                  "
    @media (max-width: 450px) {
        min-width: auto;
        width: 100%;
    }
",
                                ],
                              },
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="reset"
                        >
                          <button
                            className="sc-bdVaJa kHeIQK"
                            color="red"
                            disabled={true}
                            onClick={[Function]}
                            type="reset"
                          >
                            Cancel
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </Button>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </form>
    </StyledComponent>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Note>
`;

exports[`Note component should render Note component 1`] = `
<Fragment>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <styled.input
      name="title"
      onChange={[Function]}
      placeholder="Title"
      required={true}
      type="text"
      value="Army"
    />
    <styled.textarea
      name="text"
      onChange={[Function]}
      placeholder="Text"
      required={true}
      value="An army, ground force, or land force is a fighting force that fights primarily on land."
    />
    <styled.div>
      <Button
        color="red"
        onClick={[Function]}
        text="Back"
        type="button"
      />
      <styled.div>
        <Button
          color="green"
          disabled={true}
          form="addOrUpdateNote"
          onClick={[Function]}
          text="Save"
          type="button"
        />
        <Button
          color="red"
          disabled={true}
          onClick={[Function]}
          text="Cancel"
          type="reset"
        />
      </styled.div>
    </styled.div>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Fragment>
`;

exports[`Note component should render Note component without note 1`] = `
<Fragment>
  <styled.form
    id="addOrUpdateNote"
    onSubmit={[Function]}
  >
    <styled.input
      name="title"
      onChange={[Function]}
      placeholder="Title"
      required={true}
      type="text"
      value=""
    />
    <styled.textarea
      name="text"
      onChange={[Function]}
      placeholder="Text"
      required={true}
      value=""
    />
    <styled.div>
      <Button
        color="red"
        onClick={[Function]}
        text="Back"
        type="button"
      />
      <styled.div>
        <Button
          color="green"
          disabled={true}
          form="addOrUpdateNote"
          onClick={[Function]}
          text="Save"
          type="button"
        />
        <Button
          color="red"
          disabled={true}
          onClick={[Function]}
          text="Cancel"
          type="reset"
        />
      </styled.div>
    </styled.div>
  </styled.form>
  <Modal
    action={[Function]}
    active={false}
    buttonCancelText=""
    buttonConfirmText=""
    modalText=""
    onClose={[Function]}
  />
</Fragment>
`;
